# -*- coding: utf-8 -*-
"""Customer Churn Modelling.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13t7fk5VOuuHeMfC06FOsayh6wYOppU9j
"""

# A churn model is a mathematical representation of how churn impacts your business. 
# Churn calculations are built on existing data (the number of customers who left your service during a given time period). 
# A predictive churn model extrapolates on this data to show future potential churn rates.

# Usi`ng the existing bank data we need to predict customers who would be leaving the bank in future

# Artifical Neural Networok

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
# from tensorflow.keras.layers import LeakyReLU, PReLU, ELU
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score

dataset=pd.read_csv("Churn_Modelling.csv")
dataset.head()

# Splitting X and y varibales

X= dataset.iloc[:,3:13]
y=dataset.iloc[:,13]

# Create dummy variable

geography= pd.get_dummies(X["Geography"])
gender=pd.get_dummies(X['Gender'])

# Concatenating dummy variable with the X 

X=pd.concat([X,geography,gender],axis=1)

# Drop the original Geography and gender column
X=X.drop(['Geography','Gender'],axis=1)

X

# splitting data into traina dn test split
X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=0)

#Feature Scaling
sc=StandardScaler()
X_train=sc.fit_transform(X_train)
X_test=sc.transform(X_test)

#Creating an ANN

# Initializing the ANN

classifier= Sequential()

classifier.add(Dense(units=10, kernel_initializer='he_normal',activation='relu'))  #first hidden layer has 6 neurons
classifier.add(Dropout(0.3)) adding the dropout  layer
classifier.add(Dense(units=20, kernel_initializer='he_normal', activation='relu'))
classifier.add(Dropout(0.4))
classifier.add(Dense(units=15, kernel_initializer='he_normal', activation='relu'))
classifier.add(Dropout(0.2))
classifier.add(Dense(units=1, kernel_initializer='glorot_uniform', activation='sigmoid')) #output layer

# Compiling thhe Model

classifier.compile(optimizer='adam', loss='binary_crossentropy',metrics=['accuracy'])

# Fitting the ANN to the training set

model_history=classifier.fit(X_train,y_train,validation_split=0.33,batch_size=10,epochs=100)

# Predicting Test Reults

y_pred=classifier.predict(X_test)
y_pred=y_pred>0.5

# Making a Confusion matrix
cm=confusion_matrix(y_test,y_pred)
cm

# Calculate Accuracy

score=accuracy_score(y_test,y_pred)
score

classifier.summary()  # details of ANN architecture

#summarize history for loss

plt.plot(model_history.history['loss'])
plt.plot(model_history.history['val_loss'])

plt.title('model loss')
plt.ylabel('loss')
plt.xlabel('epoch')
plt.legend(['train','test'],loc='upper right')
plt.show()

